{"ast":null,"code":"var _jsxFileName = \"/Users/shaunalarkin/BootCamp/HW/React-Weather/src/App.js\";\n// here we destructure useState and useEffect from React to give us state/lifecycle functionality!\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { Row, Col } from \"reactstrap\";\nimport { Wrapper } from \"./styles\";\nimport API from \"./utils/API\";\nimport SearchForm from \"./components/SearchForm\";\nimport DayCard from \"./components/DayCard\";\nimport DayDetails from \"./components/DayDetails\"; // import weatherData from \"./data/sample.json\"; // only used initially until we wired up with the API\n\nconst App = () => {\n  // the following variable (data) instantiates four values in state using Hooks... note the \n  // const name is an array destructured into two variables that we can name according to their \n  // purpose -- the first array member is ALWAYS the value stored in state, and the second \n  // array member is ALWAYS the function created to set/alter the state value; after the equal sign, \n  // 'useState()' indicates that we're using React's useState functionality... the value inside the \n  // function call parens indicates the initial value of the state in question!\n  // in this example here, we're storing an object of values in state, which is useful if the\n  // included values are often or always updated together; one caution storing objects in state:\n  // the useState() Hook does not merge in your provided key value pairs into the existing\n  // state object like it did in this.setState()... instead, it overwrites everything in that\n  // location; it is common to use the spread operator to spread in the previous state values\n  // (in this case, 'data') and then to add your updated key/val pairs afterwards\n  const [data, setData] = useState({\n    searchTerm: \"\",\n    selectedDay: null,\n    location: \"\",\n    days: []\n  }); // destructuring the values in our 'data' state into individual variables\n\n  const {\n    searchTerm,\n    selectedDay,\n    location,\n    days\n  } = data; // here 'useEffect' coupled with [] as a second arg behaves like componentDidMount did in a \n  // class-based component; it will only run once right after the initial render\n\n  useEffect(() => {\n    getWeather(\"Denver, CO\");\n  }, []); // here we use 'useEffect' again (it's fairly common to have multiple useEffect blocks\n  // when you want each separate instance to be triggered at different times in the lifecycle)...\n  // in this case, we are setting the document's title on initial render AND anytime the state\n  // value of 'location' changes... the array following the anonymous function (the dependency\n  // or 'deps' array) specifies which values should trigger the effect upon change\n\n  useEffect(() => {\n    document.title = `${location ? \"Weather Info for \" + location : \"Find weather by location\"}`;\n  }, [location]); // since these functions are built inside a function-based (dumb) component, we typically create\n  // them as const function expressions, like we have here\n\n  const getWeather = location => {\n    if (!location) {\n      return alert(\"Enter a location to get weather data!\");\n    }\n\n    API.getWeather(location).then(res => {\n      if (!res) return;\n      setData({\n        searchTerm: \"\",\n        selectedDay: null,\n        location: `${res.data.city_name}, ${res.data.state_code}`,\n        days: res.data.data\n      });\n    }).catch(err => console.log(err));\n  };\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setData({ ...data,\n      [name]: value\n    });\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    getWeather(searchTerm);\n  }; // since we're in a function and not a class, there's no need to wrap in a 'render()' lifecycle method!\n\n\n  return React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Col, {\n    md: 7,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, location ? \"Weather Info for \" + location + \":\" : \"Search by Location:\")), React.createElement(Col, {\n    md: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(SearchForm, {\n    searchTerm: searchTerm,\n    handleInputChange: handleInputChange,\n    handleFormSubmit: handleFormSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, days.length ? React.createElement(React.Fragment, null, days.map(day => React.createElement(DayCard, {\n    key: day.ts,\n    day: moment(day.valid_date, \"YYYY-MM-DD\").format(\"dddd\"),\n    temp: day.temp,\n    high: day.high_temp,\n    low: day.low_temp,\n    icon: day.weather.icon,\n    description: day.weather.description,\n    precip: day.pop,\n    isSelected: day === selectedDay,\n    selectDay: () => setData({ ...data,\n      selectedDay: day\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }))) : React.createElement(\"div\", {\n    className: \"d-flex loading-spinner\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"spinner-border\",\n    role: \"status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"sr-only\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, \"Loading...\")))), React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(Col, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, selectedDay ? React.createElement(DayDetails, {\n    day: moment(selectedDay.valid_date, \"YYYY-MM-DD\").format(\"dddd, MMMM Do, YYYY\"),\n    temp: selectedDay.temp,\n    high: selectedDay.high_temp,\n    appHigh: selectedDay.app_max_temp,\n    low: selectedDay.low_temp,\n    appLow: selectedDay.app_min_temp,\n    icon: selectedDay.weather.icon,\n    description: selectedDay.weather.description,\n    precip: selectedDay.pop,\n    humidity: selectedDay.rh,\n    windSpeed: selectedDay.wind_spd,\n    windDir: selectedDay.wind_cdir_full,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }) : React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, days.length ? \"Click on a day above to view details!\" : null))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/shaunalarkin/BootCamp/HW/React-Weather/src/App.js"],"names":["React","useState","useEffect","moment","Row","Col","Wrapper","API","SearchForm","DayCard","DayDetails","App","data","setData","searchTerm","selectedDay","location","days","getWeather","document","title","alert","then","res","city_name","state_code","catch","err","console","log","handleInputChange","e","name","value","target","handleFormSubmit","preventDefault","length","map","day","ts","valid_date","format","temp","high_temp","low_temp","weather","icon","description","pop","app_max_temp","app_min_temp","rh","wind_spd","wind_cdir_full"],"mappings":"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","sourcesContent":["// here we destructure useState and useEffect from React to give us state/lifecycle functionality!\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport { Row, Col } from \"reactstrap\";\nimport { Wrapper } from \"./styles\";\nimport API from \"./utils/API\";\nimport SearchForm from \"./components/SearchForm\";\nimport DayCard from \"./components/DayCard\";\nimport DayDetails from \"./components/DayDetails\";\n// import weatherData from \"./data/sample.json\"; // only used initially until we wired up with the API\n\nconst App = () => {\n    // the following variable (data) instantiates four values in state using Hooks... note the \n    // const name is an array destructured into two variables that we can name according to their \n    // purpose -- the first array member is ALWAYS the value stored in state, and the second \n    // array member is ALWAYS the function created to set/alter the state value; after the equal sign, \n    // 'useState()' indicates that we're using React's useState functionality... the value inside the \n    // function call parens indicates the initial value of the state in question!\n\n    // in this example here, we're storing an object of values in state, which is useful if the\n    // included values are often or always updated together; one caution storing objects in state:\n    // the useState() Hook does not merge in your provided key value pairs into the existing\n    // state object like it did in this.setState()... instead, it overwrites everything in that\n    // location; it is common to use the spread operator to spread in the previous state values\n    // (in this case, 'data') and then to add your updated key/val pairs afterwards\n    const [data, setData] = useState({\n        searchTerm: \"\",\n        selectedDay: null,\n        location: \"\",\n        days: []\n    });\n    // destructuring the values in our 'data' state into individual variables\n    const { searchTerm, selectedDay, location, days } = data;\n\n    // here 'useEffect' coupled with [] as a second arg behaves like componentDidMount did in a \n    // class-based component; it will only run once right after the initial render\n    useEffect(() => {\n        getWeather(\"Denver, CO\");\n    }, []);\n\n    // here we use 'useEffect' again (it's fairly common to have multiple useEffect blocks\n    // when you want each separate instance to be triggered at different times in the lifecycle)...\n    // in this case, we are setting the document's title on initial render AND anytime the state\n    // value of 'location' changes... the array following the anonymous function (the dependency\n    // or 'deps' array) specifies which values should trigger the effect upon change\n    useEffect(() => {\n        document.title = `${location ? \"Weather Info for \" + location : \"Find weather by location\"}`;\n    }, [location]);\n\n    // since these functions are built inside a function-based (dumb) component, we typically create\n    // them as const function expressions, like we have here\n    const getWeather = location => {\n        if (!location) {\n            return alert(\"Enter a location to get weather data!\");\n        }\n\n        API.getWeather(location)\n            .then(res => {\n                if (!res) return;\n                setData({\n                    searchTerm: \"\",\n                    selectedDay: null,\n                    location: `${res.data.city_name}, ${res.data.state_code}`,\n                    days: res.data.data\n                });\n            })\n            .catch(err => console.log(err));\n    }\n\n    const handleInputChange = e => {\n        const { name, value } = e.target;\n        setData({ ...data, [name]: value });\n    }\n\n    const handleFormSubmit = e => {\n        e.preventDefault();\n        getWeather(searchTerm);\n    }\n\n    // since we're in a function and not a class, there's no need to wrap in a 'render()' lifecycle method!\n    return (\n        <Wrapper>\n            <Row>\n                <Col md={7}>\n                    <h1>{location\n                        ? \"Weather Info for \" + location + \":\"\n                        : \"Search by Location:\"}\n                    </h1>\n                </Col>\n                <Col md={5}>\n                    <SearchForm\n                        searchTerm={searchTerm}\n                        handleInputChange={handleInputChange}\n                        handleFormSubmit={handleFormSubmit}\n                    />\n                </Col>\n            </Row>\n            <Row>\n                {days.length ? (\n                    <>\n                        {days.map(day => (\n                            <DayCard\n                                key={day.ts}\n                                day={moment(day.valid_date, \"YYYY-MM-DD\").format(\"dddd\")}\n                                temp={day.temp}\n                                high={day.high_temp}\n                                low={day.low_temp}\n                                icon={day.weather.icon}\n                                description={day.weather.description}\n                                precip={day.pop}\n                                isSelected={day === selectedDay}\n                                selectDay={() => setData({ ...data, selectedDay: day })}\n                            />\n                        ))}\n                    </>\n                ) : (\n                    <div className=\"d-flex loading-spinner\">\n                        <div className=\"spinner-border\" role=\"status\">\n                            <span className=\"sr-only\">Loading...</span>\n                        </div>\n                    </div>\n                )}\n            </Row>\n            <Row>\n                <Col>\n                    {selectedDay ? (\n                        <DayDetails\n                            day={moment(selectedDay.valid_date, \"YYYY-MM-DD\").format(\"dddd, MMMM Do, YYYY\")}\n                            temp={selectedDay.temp}\n                            high={selectedDay.high_temp}\n                            appHigh={selectedDay.app_max_temp}\n                            low={selectedDay.low_temp}\n                            appLow={selectedDay.app_min_temp}\n                            icon={selectedDay.weather.icon}\n                            description={selectedDay.weather.description}\n                            precip={selectedDay.pop}\n                            humidity={selectedDay.rh}\n                            windSpeed={selectedDay.wind_spd}\n                            windDir={selectedDay.wind_cdir_full}\n                        />\n                    ) : (\n                    <h3>{days.length ? \"Click on a day above to view details!\" : null}</h3>\n                    )}\n                </Col>\n            </Row>\n        </Wrapper>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}